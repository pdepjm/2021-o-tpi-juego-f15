import soundProducer.*
import NPCs.*
import jugador.*
import nivel.*
import wollok.game.*
import objetos.*
import direcciones.*
import paredes.*
import contador.*
import interactuables.*
import metodosGenericos.*
import pantallas.*

describe "testsUwU" {
	
	const npcTest = new Civil(position = game.at(2,2))
	const remeraTest = new Remera (position = game.at(7,7))
	const knifeTest = new Cuchillo (position = game.at(3,3))
	const escotillaBanioTest = new Escotilla (position = game.at(10,10), identidad = "pared")
	const escotillaEstudioTest = new Escotilla (position = game.at(5,5), destino = escotillaBanioTest)
	const bombaTest = new Bomba ( position = game.at(11,16), tipo = explosiva, imageAux = "bomb" )
	const bombaHumoTest = new Bomba ( position = game.at(17,20), tipo = humo, imageAux = "smokeBomb" )
	const venenoTest = new Veneno ( position = game.at(12,12) )
	const npcTest2 = new Civil(position = game.at(3,3))
	
	const objetos = [npcTest, knifeTest, remeraTest, escotillaEstudioTest, escotillaBanioTest, bombaTest, bombaHumoTest, venenoTest, npcTest2]
	
	method initialize() {
		nivel.interactuables([])
		//Visuales
		objetos.forEach({ aux => nivel.agregar(aux) })
	}
	
	test "Pantalla de carga" {
		pantallaDeCarga.configuracionInicial()
		assert.equals(game.origin(), pantallaDeCarga.position())
	}
	
	test "Movimiento jugador" {
		jugador.position(game.at(5,5))
		jugador.moverPara(izquierda)
		assert.equals(game.at(4,5), jugador.position())
	}
	
	test "Movimiento por escotilla" {
		jugador.position(game.at(5,5))
		jugador.interactuar()
		assert.equals(game.at(10,10), jugador.position())
	}
	
	test "Movimiento obstaculizado por pared" {
		todasLasParedes.cargar()
		jugador.position(game.at(1,1))
		jugador.moverPara(izquierda)
		assert.equals(game.at(1,1), jugador.position())
	}
	
	test "Matar NPC" {
		jugador.position(game.at(3,3))
		jugador.interactuar()
		jugador.position(game.at(2,2))
		jugador.usarObjeto()
		assert.equals( muerto, npcTest.estado() )
	}
	
	test "Agarrar y usar remera" {
		jugador.position(game.at(7,7))
		jugador.interactuar()
		assert.equals( remeraTest, jugador.objeto() )
		jugador.usarObjeto()
		assert.that( jugador.estaVestido() )
	}
	
	test "Agarrar y usar veneno" {
		jugador.position(game.at(12,12))
		jugador.interactuar()
		assert.equals( venenoTest , jugador.objeto() )
		jugador.usarObjeto()
		assert.equals(2, venenoTest.usos())
	}
	
	test "Sacar cuerpo"{
		jugador.position(game.at(3,3))
		jugador.interactuar()
		jugador.position(game.at(2,2))
		jugador.usarObjeto()
		jugador.position(game.at(10,10))
		policia.quitarCadaveres( [npcTest] )
		assert.notThat( game.hasVisual(npcTest) )
	}
	
	test "Encontrar jugador"{
		jugador.position(game.at(3,3))
		jugador.interactuar()
		jugador.position(game.at(2,2))
		jugador.usarObjeto()
		jugador.position(game.at(4,4))
		policia.enojarse() // solo se enoja si encuentra el jugador
		assert.equals ("enojado", policia.imageAux() )
	}
	
	test "Detonar bomba explosiva"{
		npcTest.position(game.at(11,16))
		bombaTest.tipo().explosion(bombaTest)
		assert.equals(muerto, npcTest.estado())
	}
	
	test "Detonar bomba de humo"{
		npcTest.position(game.at(19,20))
		bombaHumoTest.tipo().explosion(bombaHumoTest)
		assert.equals(0, npcTest.radioDeVision())
	}
	
	test "NPC ve muerto"{  
		jugador.position(game.at(3,3))
		jugador.interactuar()
		jugador.position(game.at(2,2))
		jugador.usarObjeto()
		policia.vioMuerto()
		assert.that(npcTest2.asustado())
	}
	
	
}

describe "Metodos Genericos" {
	
	test "Numero Entre" {
		const auxiliar = metodos.numeroEntre(0,10)
		assert.that(auxiliar >= 0 and auxiliar <= 10)
	}
}
