import soundProducer.*
import NPCs.*
import jugador.*
import nivel.*
import wollok.game.*
import objetos.*
import direcciones.*
import paredes.*
import contador.*
import interactuables.*
import metodosGenericos.*
import pantallas.*

describe "testsUwU" {
	
	const npcTest = new Civil(position = game.at(2,2))
	const remeraTest = new Remera (position = game.at(7,7))
	const knifeTest = new Cuchillo (position = game.at(3,3))
	const escotillaBanioTest = new Escotilla (position = game.at(10,10), identidad = "pared")
	const escotillaEstudioTest = new Escotilla (position = game.at(5,5), destino = escotillaBanioTest)
	
	const objetos = [npcTest, knifeTest, remeraTest, escotillaEstudioTest, escotillaBanioTest]
	
	method initialize() { // Testear de polimorfismo
		nivel.interactuables([])
		//Visuales
		objetos.forEach({ aux => nivel.agregar(aux) })
	}
	
	test "Pantalla de carga" {
		pantallaDeCarga.configuracionInicial()
		assert.equals(game.origin(), pantallaDeCarga.position())
	}
	
	test "Movimiento jugador" {
		jugador.position(game.at(5,5))
		jugador.moverPara(izquierda)
		assert.equals(game.at(4,5), jugador.position())
	}
	
	test "Movimiento por escotilla" {
		jugador.position(game.at(5,5))
		jugador.interactuar()
		assert.equals(game.at(10,10), jugador.position())
	}
	
	test "Movimiento obstaculizado por pared" {
		todasLasParedes.cargar()
		jugador.position(game.at(1,1))
		jugador.moverPara(izquierda)
		assert.equals(game.at(1,1), jugador.position())
	}
	
	test "Matar NPC" {
		jugador.position(game.at(3,3))
		jugador.interactuar()
		jugador.position(game.at(2,2))
		jugador.usarObjeto()
		assert.equals( muerto, npcTest.estado() )
	}
	
	test "Agarrar y usar objeto" {
		jugador.position(game.at(7,7))
		jugador.interactuar()
		assert.equals( remeraTest, jugador.objeto() )
		jugador.usarObjeto()
		assert.that( jugador.estaVestido() )
	}
	/*
	TESTS PARA HACER:
	* 
	* Policia => 1) test de verificacion de que saca un cuerpo del mapa
	*         => 2) test de encontrar al jugador
	*         => 3) test que falla si el policia esta ocupado
	* 
	* Jugador => 1) test de que si existen dos objetos cercanos al jugador, interactua con uno de ellos a la vez
	*/
	
}

describe "Metodos Genericos" {
	
	test "Numero Entre" {
		const auxiliar = metodos.numeroEntre(0,10)
		assert.that(auxiliar >= 0 and auxiliar <= 10)
	}
}
